/**
 * This file is part of eoddata-client.
 * See README.md and LICENSE in the orject root.
 */

package be.eliwan.eoddata.client;

import com.eoddata.ws.data.DataHttpGet;
import com.eoddata.ws.data.DataHttpPost;
import com.eoddata.ws.data.DataSoap;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.Service;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;

/**
 * EODData Financial Information Web Service
 *
 * This class was generated by Apache CXF 2.7.10
 * 2014-03-12T22:46:26.453+01:00
 * Generated source version: 2.7.10
 * 
 */
@WebServiceClient(name = "Data", 
                  wsdlLocation = "file:/home/joachim/apps/java/eoddata-client/src/main/wsdl/eoddata.wsdl",
                  targetNamespace = "http://ws.eoddata.com/Data") 
public class EodData extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://ws.eoddata.com/Data", "Data");
    public final static QName DataSoap12 = new QName("http://ws.eoddata.com/Data", "DataSoap12");
    public final static QName DataSoap = new QName("http://ws.eoddata.com/Data", "DataSoap");
    public final static QName DataHttpGet = new QName("http://ws.eoddata.com/Data", "DataHttpGet");
    public final static QName DataHttpPost = new QName("http://ws.eoddata.com/Data", "DataHttpPost");
    static {
        URL url = null;
        try {
            url = new URL("file:/home/joachim/apps/java/eoddata-client/src/main/wsdl/eoddata.wsdl");
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(EodData.class.getName())
                .log(java.util.logging.Level.INFO, 
                     "Can not initialize the default wsdl from {0}", "file:/home/joachim/apps/java/eoddata-client/src/main/wsdl/eoddata.wsdl");
        }
        WSDL_LOCATION = url;
    }

    public EodData(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public EodData(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public EodData() {
        super(WSDL_LOCATION, SERVICE);
    }
    
    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    //compliant code instead.
    public EodData(WebServiceFeature... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    //compliant code instead.
    public EodData(URL wsdlLocation, WebServiceFeature... features) {
        super(wsdlLocation, SERVICE, features);
    }

    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    //compliant code instead.
    public EodData(URL wsdlLocation, QName serviceName, WebServiceFeature... features) {
        super(wsdlLocation, serviceName, features);
    }

    /**
     *
     * @return
     *     returns DataSoap
     */
    @WebEndpoint(name = "DataSoap12")
    public DataSoap getDataSoap12() {
        return super.getPort(DataSoap12, DataSoap.class);
    }

    /**
     *
     * @param features
     *     A list of {@link WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns DataSoap
     */
    @WebEndpoint(name = "DataSoap12")
    public DataSoap getDataSoap12(WebServiceFeature... features) {
        return super.getPort(DataSoap12, DataSoap.class, features);
    }
    /**
     *
     * @return
     *     returns DataSoap
     */
    @WebEndpoint(name = "DataSoap")
    public DataSoap getDataSoap() {
        return super.getPort(DataSoap, DataSoap.class);
    }

    /**
     *
     * @param features
     *     A list of {@link WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns DataSoap
     */
    @WebEndpoint(name = "DataSoap")
    public DataSoap getDataSoap(WebServiceFeature... features) {
        return super.getPort(DataSoap, DataSoap.class, features);
    }
    /**
     *
     * @return
     *     returns DataHttpGet
     */
    @WebEndpoint(name = "DataHttpGet")
    public DataHttpGet getDataHttpGet() {
        return super.getPort(DataHttpGet, DataHttpGet.class);
    }

    /**
     *
     * @param features
     *     A list of {@link WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns DataHttpGet
     */
    @WebEndpoint(name = "DataHttpGet")
    public DataHttpGet getDataHttpGet(WebServiceFeature... features) {
        return super.getPort(DataHttpGet, DataHttpGet.class, features);
    }
    /**
     *
     * @return
     *     returns DataHttpPost
     */
    @WebEndpoint(name = "DataHttpPost")
    public DataHttpPost getDataHttpPost() {
        return super.getPort(DataHttpPost, DataHttpPost.class);
    }

    /**
     *
     * @param features
     *     A list of {@link WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns DataHttpPost
     */
    @WebEndpoint(name = "DataHttpPost")
    public DataHttpPost getDataHttpPost(WebServiceFeature... features) {
        return super.getPort(DataHttpPost, DataHttpPost.class, features);
    }

}
