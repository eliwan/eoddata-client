/**
 * This file is part of eoddata-client.
 * See README.md and LICENSE in the orject root.
 */

package be.eliwan.eoddata.client;

import com.eoddata.ws.data.DataHttpGet;
import com.eoddata.ws.data.DataHttpPost;
import com.eoddata.ws.data.DataSoap;

import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.Service;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;

/**
 * EODData Financial Information Web Service.
 * <p/>
 * Based on client generated by Apache CXF.
 * <p/>
 * Changes:
 * - assure wsdl is loaded from the classpath.
 * - made variables private.
 * - allow configuring the request URL (http://ws.eoddata.com/data.asmx) using a property (ws.eoddata.com.client.url).
 */
@WebServiceClient(name = "Data",
        wsdlLocation = "classpath:/be/eliwan/eoddata/client/wsdl/eoddata.wsdl",
        targetNamespace = "http://ws.eoddata.com/Data")
public class EodDataClient extends Service {

    private static final String PROPERTY_TO_OVERRIDE_ENDPOINT_URL = "ws.eoddata.com.client.url";
    private static final String DEFAULT_ENDPOINT_URL = "http://ws.eoddata.com/data.asmx";

    private static final URL WSDL_LOCATION;

    private static final QName SERVICE;
    private static final QName DATA_SOAP_12;
    private static final QName DATA_SOAP;
    private static final QName DATA_HTTP_GET;
    private static final QName DATA_HTTP_POST;

    static {
        ClassLoader cl = Thread.currentThread().getContextClassLoader();
        if (null == cl) {
            cl = EodDataClient.class.getClassLoader();
        }
        WSDL_LOCATION = cl.getResource("be/eliwan/eoddata/client/wsdl/eoddata.wsdl");

        String endpointUrl = System.getProperty(PROPERTY_TO_OVERRIDE_ENDPOINT_URL);
        if (null == endpointUrl) {
            endpointUrl = DEFAULT_ENDPOINT_URL;
        }

        SERVICE = new QName(endpointUrl, "Data");
        DATA_SOAP_12 = new QName(endpointUrl, "DataSoap12");
        DATA_SOAP = new QName("http://ws.eoddata.com/Data", "DataSoap");
        DATA_HTTP_GET = new QName(endpointUrl, "DATA_HTTP_GET");
        DATA_HTTP_POST = new QName(endpointUrl, "DATA_HTTP_POST");
    }

    public EodDataClient(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public EodDataClient(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public EodDataClient() {
        super(WSDL_LOCATION, SERVICE);
    }

    // This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    // API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    // compliant code instead.
    public EodDataClient(WebServiceFeature... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    // This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    // API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    // compliant code instead.
    public EodDataClient(URL wsdlLocation, WebServiceFeature... features) {
        super(wsdlLocation, SERVICE, features);
    }

    // This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    // API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    // compliant code instead.
    public EodDataClient(URL wsdlLocation, QName serviceName, WebServiceFeature... features) {
        super(wsdlLocation, serviceName, features);
    }

    /**
     * @return returns DATA_SOAP
     */
    @WebEndpoint(name = "DataSoap12")
    public DataSoap getDataSoap12() {
        return super.getPort(DATA_SOAP_12, DataSoap.class);
    }

    /**
     * @param features A list of {@link WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return returns DATA_SOAP
     */
    @WebEndpoint(name = "DataSoap12")
    public DataSoap getDataSoap12(WebServiceFeature... features) {
        return super.getPort(DATA_SOAP_12, DataSoap.class, features);
    }

    /**
     * @return returns DATA_SOAP
     */
    @WebEndpoint(name = "DataSoap")
    public DataSoap getDataSoap() {
        return super.getPort(DATA_SOAP, DataSoap.class);
    }

    /**
     * @param features A list of {@link WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return returns DATA_SOAP
     */
    @WebEndpoint(name = "DataSoap")
    public DataSoap getDataSoap(WebServiceFeature... features) {
        return super.getPort(DATA_SOAP, DataSoap.class, features);
    }

    /**
     * @return returns DATA_HTTP_GET
     */
    @WebEndpoint(name = "DataHttpGet")
    public DataHttpGet getDataHttpGet() {
        return super.getPort(DATA_HTTP_GET, DataHttpGet.class);
    }

    /**
     * @param features A list of {@link WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return returns DATA_HTTP_GET
     */
    @WebEndpoint(name = "DataHttpGet")
    public DataHttpGet getDataHttpGet(WebServiceFeature... features) {
        return super.getPort(DATA_HTTP_GET, DataHttpGet.class, features);
    }

    /**
     * @return returns DATA_HTTP_POST
     */
    @WebEndpoint(name = "DataHttpPost")
    public DataHttpPost getDataHttpPost() {
        return super.getPort(DATA_HTTP_POST, DataHttpPost.class);
    }

    /**
     * @param features A list of {@link WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return returns DATA_HTTP_POST
     */
    @WebEndpoint(name = "DataHttpPost")
    public DataHttpPost getDataHttpPost(WebServiceFeature... features) {
        return super.getPort(DATA_HTTP_POST, DataHttpPost.class, features);
    }

}
